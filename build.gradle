plugins {
  id 'org.springframework.boot' version '2.6.5'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'java'
  id 'groovy'
  id 'war'
  id "com.microsoft.azure.azurewebapp" version "1.2.0"
  id "com.github.node-gradle.node" version "3.2.1"
}

group = 'com.zglossip'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
  mavenCentral()
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-web:2.6.5'
  implementation('org.springframework.retry:spring-retry:1.3.2')
  providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat:2.6.5'

  //Swagger
  implementation(group: 'io.springfox', name: 'springfox-swagger2', version: '2.7.0')
  implementation(group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.7.0')

  //Test
  testImplementation('org.springframework.boot:spring-boot-starter-test:2.6.5') {
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
  testImplementation('org.codehaus.groovy:groovy:3.0.5')
  testImplementation('org.spockframework:spock-core:2.0-M3-groovy-3.0')
  testImplementation('org.spockframework:spock-spring:2.0-M3-groovy-3.0')
}

test {
  useJUnitPlatform()
}

azurewebapp {
  subscription = '34be5dce-7f3d-4bda-96ac-86948a02ac5a'
  resourceGroup = 'bopbrowser_group'
  appName = 'bopbrowser'
  pricingTier = 'F1'
  region = 'centralus'
  runtime {
    os = 'Linux'
    webContainer = 'Tomcat 8.5'
    javaVersion = 'Java 11'
  }
}

node {
  // Base URL for fetching node distributions (change if you have a mirror).
  distBaseUrl = 'https://nodejs.org/dist'

  // Set the work directory for unpacking node
  workDir = file("${rootDir}/frontend")

  // Set the work directory for NPM
  npmWorkDir = file("${rootDir}/frontend")

  // Set the work directory where node_modules should be located
  nodeModulesDir = file("${rootDir}/frontend")
}

task buildFrontend(type: NpmTask) {
  doFirst {
    delete 'src/main/resources/public'
    delete "${rootDir}/frontend/dist"
  }
  //npmInstall
  dependsOn { npmInstall }
  //npm run build
  args = ['run', 'build']
  //copy from dist dir to main sourceSet
  doLast {
    copy {
      from 'frontend/dist/'
      into 'src/main/resources/public/'
    }
  }
}

task cleanFrontend {
  delete 'src/main/resources/public'
  delete "${rootDir}/frontend/dist"
}